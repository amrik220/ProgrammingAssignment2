play()
setwd(..)
setwd("Documents")
info()
?setwd
setwd(dir)
setwd(..)
setwd("..")
getwd
getwd()
nxt()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2")
?dir.create
dir.create("testdir2", file.path("testdir2","testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2",recursive = T)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
getwd()
unlink("testdir",recursive = TRUE)
library(swirl)
swirl()
0
bye()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Amrik")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
paly()
plaY()
play()
a <- rep(NA, times = 10)
a
b <- rep(NA, 10)
b
nxt()
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(0,10, by = 0.5)
my_seq <- seq(5, 10, length = 30)
lengh(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
demo()
Hershey
colors()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 >- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
0
bye()
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim()
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
plaY()
play()
as.matrix(1:20)
as.matrix(1:20, nrow = 4)
as.matrix(1:20, nrow = 4. ncol = 5)
as.matrix(1:20, nrow = 4, ncol = 5)
nxt()
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(Flase == True) == False
(False == True) == False
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <- 10
10 <= 10
5 != 7
5 != 7
5 !== 7
5 != 7
!5 == !7
! 5 == 7
FALSE & FALSE
play()
FALSE ! FALSE
FALSE !! FALSE
nxt()
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
play()
FALSE | FALSE
nxt()
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
T
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
play()
isTRUE(3)
nxt()
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
play()
i <- rnorm(10)
i
s <- sample(10)
s
nxt()
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
bye()
a <- array(rnorm(2*2*10))
a
a <- array(rnorm(2 * 2 * 10))
a
a <- array(rnorm(2 * 2 * 10))
a
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
rnorm(200)
rnorm(2 * 2 * 10)
rnorm(40)
?array
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
str(array)
library(datasets)
data(iris)
?iris
iris
tapply(iris, iris$Sepal.Length, mean)
tapply(iris, iris$Species, mean)
split(iris, iris$Species, mean)
split(iris, iris$Species)
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[ , c("Sepal.Length")]))
lapply(s, colMeans(s[ , c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[ , c("virginica")]))
head(iris)
s <- split(iris, iris$Species)
lapply(s, function (x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
lapply(s, function (x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function (x) colMeans(x[, 1)]))
lapply(s, function (x) colMeans(x[, 1]))
lapply(s, function (x) colMeans(x[, 2]))
lapply(s, colMeans(,1))
?colMeans
lapply(s, colMeans(s))
lapply(s, colMeans(s[, 1]))
lapply(s, function (x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
owMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
head(mtcars)
mtcars
head(mtcars)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
s <- split(iris$Sepal.Length, iris$Species)
sapply(s, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl$4), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
avgHP <- tapply(mtcars$mpg, mtcars$cyl, mean)
avgHP
avgHP[, 1]
avgHP(1)
avgHP[1]
avgHP[1] - avgHP[3]
debug(ls)
ls()
4
ls()
5
lapply(s, function (x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
avgHP[1] - avgHP[3]
tapply(mtcars$hp, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
avg
exit()
0
end
library(datasets)
data("iris")
data(iris)
head(iris)
apply(iris[, 1:4], 2, mean)
lapply(s, function (x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
sapply(split(iris$Sepal.Length, iris$Species)),mean)
sapply(split(iris$Sepal.Length, iris$Species)),mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
avgHP <- tapply(mtcars$hp, mtcars$cyl, mean)
avgHP[1]-avgHP[3]
abs(avgHP[1]-avgHP[3])
x <- matrix(1:4, nrow = 2, ncol = 2)
x
solve(x)
y <- matrix(1:6, nrow = 2, ncol = 3)
solve(y)
setwd("C:/Users/A/Rassignment2/ProgrammingAssignment2")
ls()
list.files()
inverseM
?InverseM
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setinvrs <- function(solve) invrs <<- solve
getinvrs <- function() invrs
list(set = set, get = get,
setinvrs = setinvrs,
getinvrs = getinvrs)
}
## makeCacheMatrix do the following: 1. set the matrix, 2. get the matrix,
## 3. set the inverse of the matrix, 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setinvrs <- function(solve) invrs <<- solve
getinvrs <- function() invrs
list(set = set, get = get,
setinvrs = setinvrs,
getinvrs = getinvrs)
}
## The following function calculates the inverse of the matrix created with the
## above function. However, it first checks if the invere is already calculated.
## If so, it gets the inverse from the cache and skips the inversion.
## Otherwise, it calculates the inverse matrix and cache it setinvrs function.
cacheSolve <- function(x, ...) {
invrs <- x$getinvrs()
if(!is.null(invrs)){
message("getting cached data")
return(invrs)
}
data <- x$get()
invrs <- solve(data, ...)
x$setinvrs(invrs)
invrs
}
?makeCacheMatrix
makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
t <- matrix(1:4, nrow = 2, ncol = 2)
t
makeCacheMatrix(t)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
rr <- c(1,3, 4)
makeVector(rr)
mean(rr)
solve(t)
cachemean(rr)
cacheSolve(t)
t
tcache <- makeCacheMatrix(t)
tcache
tInvrs < cacheSolve(t)
tInvrs <- cacheSolve(tcache)
tInvrs
makeCacheMatrix(t)
bb <- makeCacheMatrix(t)
## makeCacheMatrix do the following: 1. set the matrix, 2. get the matrix,
## 3. set the inverse of the matrix, 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
invrs <- NULL
set <- function(y){
x <<- y
invrs <<- NULL
}
get <- function() x
setinvrs <- function(invmat) invrs <<- invmat
getinvrs <- function() invrs
list(set = set, get = get,
setinvrs = setinvrs,
getinvrs = getinvrs)
}
## The following function calculates the inverse of the matrix created with the
## above function. However, it first checks if the invere is already calculated.
## If so, it gets the inverse from the cache and skips the inversion.
## Otherwise, it calculates the inverse matrix and cache it setinvrs function.
cacheSolve <- function(x, ...) {
invrs <- x$getinvrs()
if(!is.null(invrs)){
message("getting cached data")
return(invrs)
}
data <- x$get()
invrs <- solve(data, ...)
x$setinvrs(invrs)
invrs ## return the result
}
##
##
##
##
##
##
##
